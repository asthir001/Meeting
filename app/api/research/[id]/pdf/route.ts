import { researchStore } from "@/lib/research-store"
import { type NextRequest, NextResponse } from "next/server"

// In-memory storage for demo purposes
// const researchCache = new Map<string, any>()

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const researchId = params.id
    const researchData = researchStore.get(researchId)

    if (!researchData) {
      return NextResponse.json({ error: "Research data not found" }, { status: 404 })
    }

    // Generate PDF content (simplified HTML for demo)
    const pdfContent = generatePDFContent(researchData)

    // In production, use a proper PDF generation library like Puppeteer or jsPDF
    // For now, we'll return a simple text file as demonstration
    // const blob = new Blob([pdfContent], { type: "text/plain" })

    return new Response(pdfContent, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${researchData.companyName}-research-report.pdf"`,
      },
    })
  } catch (error) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}

function generatePDFContent(researchData: any): string {
  const sections = [
    "overview",
    "products",
    "market",
    "financial",
    "customers",
    "marketing",
    "online",
    "news",
    "challenges",
    "valueProposition",
  ]

  const sectionTitles = {
    overview: "Company Overview",
    products: "Products and Services",
    market: "Market Position & Industry",
    financial: "Financial Information",
    customers: "Customer Base",
    marketing: "Marketing & Sales Strategy",
    online: "Online Presence & Reputation",
    news: "Recent News & Developments",
    challenges: "Pain Points & Opportunities",
    valueProposition: "Your Value Proposition (Contextual)",
  }

  let content = `
COMPANY RESEARCH REPORT
${researchData.companyName}
Project Domain: ${researchData.projectDomain}
Generated: ${new Date(researchData.generatedAt).toLocaleDateString()}

================================================================================

`

  sections.forEach((sectionKey) => {
    const section = researchData.sections[sectionKey]
    const title = sectionTitles[sectionKey as keyof typeof sectionTitles]

    content += `${title.toUpperCase()}\n`
    content += "=".repeat(title.length) + "\n\n"

    if (section && section.content) {
      if (Array.isArray(section.content)) {
        section.content.forEach((item: any) => {
          if (item.subtitle) {
            content += `${item.subtitle}\n`
            content += "-".repeat(item.subtitle.length) + "\n"
          }
          content += `${item.text}\n\n`
          if (item.sources && item.sources.length > 0) {
            content += "Sources:\n"
            item.sources.forEach((source: any, index: number) => {
              content += `${index + 1}. ${source.url}\n`
            })
            content += "\n"
          }
        })
      } else {
        content += `${section.content}\n\n`
        if (section.sources && section.sources.length > 0) {
          content += "Sources:\n"
          section.sources.forEach((source: any, index: number) => {
            content += `${index + 1}. ${source.url}\n`
          })
          content += "\n"
        }
      }
    } else {
      content += "No information available\n\n"
    }

    content += "\n"
  })

  content += `
================================================================================
Report generated by Consultant's Company Insight Hub
${new Date().toISOString()}
`

  return content
}
